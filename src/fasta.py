# This is a python script that read an *.agg file and create a FASTA file

# What we need:
# load_agg
# write_fasta
#   with n-grams support
#

from math import ceil


class FastaMapping(list):
    def __init__(self, name, *args):
        list.__init__(self, *args)
        self.name = name


class Fasta:
    def __init__(self, name1, name2, data):
        self.name1 = name1
        self.name2 = name2
        self.data = data
        self.convert_rate = 1
        self.dataType = "raw"  # Possible content: raw, amino, number (in string format)


def convert_fasta(fasta, mapping):
    origin = len(fasta.data)
    if mapping is None or len(mapping) < 400:
        return
    fasta.dataType = mapping.name
    m = []
    for j in fasta.data:
        if j is not None and mapping[j] is not None:
            m.append(mapping[j])
    modified = len(m)
    fasta.data = "".join(m)
    fasta.convert_rate = modified/origin
    return origin, modified


def write_fasta(out_f, t, **kwargs):
    n = kwargs.get("n", 0)
    double = kwargs.get("double", False)

    if n == 0:
        if len(t.data) == 0:
            return
        out_f.write(">{0}_{1} {1}\n".format(t.name1, t.name2))
        for x in t.data:
            out_f.write(x)
        out_f.write("\n")
    else:
        times = ceil(len(t.data) / n)
        half = ceil(n/2)
        for g in range(times):
            write_fasta(out_f, Fasta(t.name1, "{0}_{1}".format(t.name2, g), t.data[n * g: n * (g + 1)]))
            if double and len(t.data[n * g + half: n * (g + 1) + half]) > 0:
                write_fasta(out_f,
                            Fasta(t.name1, "{0}_{1}_half".format(t.name2, g), t.data[n * g + half: n * (g + 1) + half])
                            )


def read_fasta(in_f):
    f = open(in_f)
    ret = []
    curr_name1 = 0
    curr_name2 = 0
    curr_fasta = None
    for line in f:
        if line.startswith(">"):
            curr_name1 = int(line[1:].split('_')[0])
            curr_name2 = int(line[1:].split('_')[1])
            curr_fasta = Fasta(curr_name1, curr_name2, "")
            ret.append(curr_fasta)
            continue
        curr_fasta.data += line.rsplit()[0]

    return ret


# def create_multiple_fasta(in_file, dire, **kwargs):
#
#     log_name = os.path.join(dire, "fasta_gen_log_{}".format(int(time.time())))
#     out_log = open(log_name, "w")
#     agg_list = load_agg(in_file, "name1")
#
#     mapping = amino_mapping_generator(agg_list)
#
#     for pid, record_list in groupby(agg_list, lambda x: x.name1):
#         out_f = open(os.path.join(dire, str(pid)), "w")
#
#         for record in record_list:
#             convert = Fasta.convert(record, mapping)
#             out_log.write("convert {0} {1}\n".format(convert[0], convert[1]))
#             write_fasta(out_f, record, **kwargs)
#
#         out_f.close()

# if __name__ == "__main__":
#     if argc < argv_limit:
#         print_usage()
#         exit()
#     else:
#         n_gram = 0
#         if argc == 4:
#             n_gram = int(argv[3])
#         create_multiple_fasta(argv[1], argv[2], n=n_gram, double=True)
