import os
from random import shuffle
from time import time
from mapping import mapping_generator
from fasta import Fasta

class DataBaseManager:
    def __init__(self, _dm, _lm):
        self.dm = _dm
        self.lm = _lm
        self.ref_db = []
        self.int_val_db = []

    def load_reference(self, ref, append=True):
        if append:
            self.ref_db.append(DataBaseManager.load_agg(ref, sort=""))
        else:
            self.ref_db = DataBaseManager.load_agg(ref, sort="")

    def load_internal_validation(self, val, append=True):
        if append:
            self.int_val_db.append(DataBaseManager.load_agg(val, sort=""))
        else:
            self.int_val_db = DataBaseManager.load_agg(val, sort="")

    def make_reference(self, number=-1, random=True):
        ret = shuffle(self.ref_db) if random else self.ref_db
        return ret if number == -1 else ret[:number]

    def make_internal_validation(self, number=20, random=True):
        ret = shuffle(self.int_val_db) if random else self.int_val_db
        return ret if number == -1 else ret[:number]

    @staticmethod
    def agg_line_process(line):
        a = line.split()
        return Fasta(int(a[0]), int(a[1]), list(mapping_generator([int(x) for x in a[2:]])))

    @staticmethod
    def load_agg(in_file, sort="data"):
        in_f = open(in_file)
        temp = [DataBaseManager.agg_line_process(l) for l in in_f]
        in_f.close()
        if sort == "data":
            return sorted(temp, key=lambda x: len(x.data))
        elif sort == "name1":
            return sorted(temp, key=lambda x: x.name1)
        else:
            return temp
