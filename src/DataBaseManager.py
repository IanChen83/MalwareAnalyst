from random import shuffle
from src.mapping import mapping_generator
from src.fasta import Fasta, read_fasta


class DataBaseManager:
    def __init__(self, _dm, _lm):
        self.dm = _dm
        self.lm = _lm
        self.ref_db = []
        self.int_val_db = []

    def load_reference(self, ref, append=True):
        if append:
            self.ref_db += DataBaseManager.load_agg(ref, sort="")
        else:
            self.ref_db = DataBaseManager.load_agg(ref, sort="")

    def load_internal_validation(self, val, append=True):
        if append:
            self.int_val_db += DataBaseManager.load_agg(val, sort="")
        else:
            self.int_val_db = DataBaseManager.load_agg(val, sort="")

    def make_reference(self, number=-1, random=True):
        if random:
            shuffle(self.ref_db)
        return self.ref_db if number == -1 else self.ref_db[:number]

    def make_internal_validation(self, number=20, random=True):
        if random:
            shuffle(self.int_val_db)
        return self.int_val_db if number == -1 else self.int_val_db[:number]

    @staticmethod
    def agg_line_process(line):
        a = line.split()
        return Fasta(int(a[0]), int(a[1]), list(mapping_generator([int(x) for x in a[2:]])))

    @staticmethod
    def load_agg(in_file, sort="data"):
        in_f = open(in_file)
        temp = [DataBaseManager.agg_line_process(l) for l in in_f]
        in_f.close()
        if sort == "data":
            return sorted(temp, key=lambda x: len(x.data))
        elif sort == "name1":
            return sorted(temp, key=lambda x: x.name1)
        else:
            return temp

    def load_reference_fasta(self, ref, append=True):
        if append:
            self.ref_db += self.load_fasta(ref)
        else:
            self.ref_db = self.load_fasta(ref)

    def load_internal_validation_fasta(self, ref, append=True):
        if append:
            self.int_val_db += self.load_fasta(ref)
        else:
            self.int_val_db = self.load_fasta(ref)

    @staticmethod
    def load_fasta(in_file):
        return read_fasta(in_file)
