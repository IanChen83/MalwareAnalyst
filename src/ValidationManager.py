from time import time
import os
from fasta import write_fasta


class Record:
    def __init__(self, lens):
        self.record = [0] * lens
        self.lens = lens

    def merge(self, a, b):
        for t in range(a - 1, b):
            self.record[t] += 1

    def print_record(self):
        text = [str(i) if i < 10 else '+' for i in self.record]
        print("".join(text))

    def output_record(self, out):
        out.write("no,count\n")
        for t in range(self.lens):
            out.write("{0},{1}\n".format(t, self.record[t]))


class ValidationManager:
    def __init__(self, _dm, _lm, _dbm):
        self.dm = _dm
        self.lm = _lm
        self.dbm = _dbm
        self.maxmatch_length = 4
        self.virus_min_count = 10

    def internal_accuracy_validation(self):
        pass

    def validate(self, query_fasta):
        v_dir = self.dm.add_temp_dir("v_{}".format(int(time())))
        query = self.make_temp_fasta(query_fasta)
        reference = self.make_temp_fasta(self.dbm.make_reference())
        query_output = os.path.join(v_dir, "query.maxmatch")
        os.system("mummer -maxmatch -l {0} {1} {2} > {3}".format(
            self.maxmatch_length,
            reference,
            query,
            query_output
        ))

        self.parse_query_output(query_output)
        self.remove_temp_fasta(reference)
        self.remove_temp_fasta(query)
        self.dm.remove_temp_dir(v_dir)

    def make_temp_fasta(self, fasta):
        name = os.path.join(self.dm.validation_dir, "validation_{}".format(int(time())))
        out = open(name, 'w')
        for f in fasta:
            write_fasta(out, f)
        out.close()
        return name

    @staticmethod
    def remove_temp_fasta(name):
        if os.path.isfile(name):
            os.remove(name)

    def parse_query_output(self, qo):
        pass
